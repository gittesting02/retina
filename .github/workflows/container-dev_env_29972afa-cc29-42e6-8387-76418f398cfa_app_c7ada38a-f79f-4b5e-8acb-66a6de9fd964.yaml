name: >-
  container-dev_env_29972afa-cc29-42e6-8387-76418f398cfa_app_c7ada38a-f79f-4b5e-8acb-66a6de9fd964
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - main
    paths: []
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_6d4dac87-f37e-4c43-b759-6406710f8a8d
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.RETINA_ENV_29972AFACC2942E6838776418F398CFA_APP_C7ADA38AF79F4B5E8ACB66A6DE9FD964_CONTAINERDEV_ENV_29972AFACC2942E6838776418F398CFA_APP_C7ADA38AF79F4B5E8ACB66A6DE9FD964_YAML}}
  IMAGE_TAG: ${{github.event.client_payload.commitId || github.sha}}
  IMAGE_NAME: gchr.io/asdasdads/deploy-stat-check-app-2
  DOCKER_FILE_PATH: README.md
  DOCKER_BUILD_CONTEXT: .
  SCAN_SEVERITY: CRITICAL
  TRIVY_SCAN_EXIT_CODE: '0'
  TRIVY_RESULT_FORMAT: sarif
  REPOSITORY_NAME: deploy-stat-check-app-2
  DEPLOY_STEP_SHOULD_DEPLOY: 'true'
jobs:
  code-scan:
    name: Code Scan
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: 'Run :: Checkout repository for Code Scan'
        uses: actions/checkout@v4
      - name: 'Run :: Decoding Secrets a28e9f7e-8035-400e-a566-26ee813b72da'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Install Semgrep, Scan and Print'
        run: |2-

                  docker run -i -v "${PWD}:/src" semgrep/semgrep semgrep /src --json --quiet > semgrep_results.json
                  echo "Scan Results..."
                  cat semgrep_results.json
                
      - name: 'Run :: Upload Code Scan Report'
        run: |2-

                  SARIF_FILE="semgrep_results.json"
                  if [ -n "$SARIF_FILE" ]; then
                    cat "$SARIF_FILE" > ${{ env.IMAGE_TAG }}-codeql-result.sarif
                    echo "Uploading CodeQL Results to S3 :: ${{ env.IMAGE_TAG }}-codeql-result.sarif"
           
                    response=$(curl -X POST -F 'file=@${{ env.IMAGE_TAG }}-codeql-result.sarif' -F 'provider=aws' -F 'resourceType=codeql-report' -F 'cloudStoragePath=/${{ env.PIPELINE_APPLICATION_ID }}/codeql_results/'  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-auth-by: sa' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'Content-Type: multipart/form-data'  '${{ env.S3_UPLOAD_ENDPOINT }}')

                    if echo "$response" | grep -q '"success":true'; then
                      echo "SUCCESS :: $response"
                    else
                      echo "FAILED :: $response"
                    fi

                  else
                      echo "SARIF file not found."
                  fi
  _status-pending:
    name: _status Pending
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets c7422c3b-fbc9-48fd-8714-febef783647c'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Started
        run: |2-

                response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/PENDING')

                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                fi
              
  _release-info:
    name: _release Info
    permissions: write-all
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.releaseData }}
    steps:
      - name: 'Run :: Decoding Secrets 6edf74d0-ebbd-4b7b-93ba-7fcb64ae21f1'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Release
        run: |2-

                echo "Pipeline Release Information"
                echo "////////////////////////////"
                echo "releaseId         : ${{ github.event.client_payload.releaseData.releaseId }}"
                echo "pipelineId        : ${{ github.event.client_payload.releaseData.pipelineId }}"
                echo "pipelineRunId     : ${{ github.run_id }}"
                echo "applicationId     : ${{ github.event.client_payload.releaseData.appId }}"
                echo "versionId         : ${{ env.DEPLOYMENT_APP_VERSION_ID }}"
                echo "credentialId      : ${{ env.PIPELINE_CREDENTIAL_ID }}"

                echo "userName          : ${{ github.repository_owner }}"
                echo "repositoryName    : ${{ github.repository }}"

                echo "commitId          : ${{ env.IMAGE_TAG }}"
                echo "commitHash        : ${{ env.IMAGE_TAG }}"
                echo "commitAvatar      : https://github.com/${{ github.event.head_commit.author.name }}.png"
                echo "commitTime        : ${{ github.event.head_commit.timestamp }}"
                echo "commitMessage     : ${{ github.event.head_commit.message }}"
                echo "commitUser        : ${{ github.event.head_commit.author.name }}"

                echo "shouldDeploy      : ${{ env.DEPLOY_STEP_SHOULD_DEPLOY }}"
                echo "containerName     : ${{ env.DEPLOYMENT_CONTAINER_NAME }}"
                echo "imageRegistryURL  : ${{ env.IMAGE_NAME }}",

                # Storing Release Infomation for Deployment
                response=$(curl -X POST -d "releaseId=${{ github.event.client_payload.releaseData.releaseId }}&pipelineId=${{ github.event.client_payload.releaseData.pipelineId }}&pipelineRunId=${{ github.run_id }}&versionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&applicationId=${{ github.event.client_payload.releaseData.appId }}&credentialId=${{ env.PIPELINE_CREDENTIAL_ID }}&userName=${{ github.repository_owner }}&repositoryName=${{ github.repository }}&commitId=${{ env.IMAGE_TAG }}&commitData[commitHash]=${{ env.IMAGE_TAG }}&commitData[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitData[commitTime]=${{ github.event.head_commit.timestamp }}&commitData[commitMessage]=${{ github.event.head_commit.message }}&commitData[commitUser]=${{ github.event.head_commit.author.name }}&shouldDeploy=${{ env.DEPLOY_STEP_SHOULD_DEPLOY }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&imageRegistryURL=${{ env.IMAGE_NAME }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/release/pipeline')

                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                fi
              
  build-and-push:
    name: Build And Push
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      stepsCanProceed: ${{ env.STEPS_CAN_PROCEED }}
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: |2-

              git fetch
              git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets 71d5b4c3-cda2-4597-8a85-4d75be95b066'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials 5ca14971-7687-4af3-9913-6814c2ff1d8b'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Login to Amazon ECR'
        id: skyu-login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: 'Run :: Check if image already exists'
        id: check-image-existence-step-id
        run: |2-

              if docker pull ${{ env.IMAGE_NAME }}:${{env.IMAGE_TAG}} >/dev/null 2>&1; 
              then
                echo "Image exists in registry."
                echo "STEPS_CAN_PROCEED=false" >> $GITHUB_ENV
              else
                echo "Image does not exist in registry."
                echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              fi
              
      - name: 'Run :: Build With Docker'
        run: >-
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f
          ${{env.DOCKER_FILE_PATH}} ${{env.DOCKER_BUILD_CONTEXT}}
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: ${{env.TRIVY_RESULT_FORMAT}}
          output: ${{ env.IMAGE_TAG }}-trivy-result.json
          exit-code: ${{env.TRIVY_SCAN_EXIT_CODE}}
          vuln-type: os,library
          severity: ${{env.SCAN_SEVERITY}}
          hide-progress: true
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Evaluate Trivy Results'
        run: |2-

              # Minifying Json
              jq -c '.' ${{ env.IMAGE_TAG }}-trivy-result.json > ${{ env.IMAGE_TAG }}-trivy-result.min.json
              trivy_result=$(cat "${{ env.IMAGE_TAG }}-trivy-result.min.json")

              # Set the desired severity level
              desiredSeverity="${{ env.SCAN_SEVERITY }}"
              IFS=',' read -ra severities <<< "$desiredSeverity"  # Split the severity string

              # Print the tags array for debugging
              jq '.runs[0].tool.driver.rules[].properties.tags' "${{ env.IMAGE_TAG }}-trivy-result.json"

              VULNERABILITY_COUNT=0

              for severity in "${severities[@]}"; do
                count=$(jq --arg severity "$severity" '.runs[0].tool.driver.rules | map(select(.properties.tags and (.properties.tags | map(tostring) | index($severity) // empty))) | length' "${{ env.IMAGE_TAG }}-trivy-result.json")
                echo "Number of $severity vulnerabilities: $count"
                VULNERABILITY_COUNT=$((VULNERABILITY_COUNT + count))
              done

              echo "Total Number of vulnerabilities: $VULNERABILITY_COUNT"

              if [ "$VULNERABILITY_COUNT" -gt 0 ]; then
                echo "STEPS_CAN_PROCEED=false" >> $GITHUB_ENV
                echo "VULNERABILITY_COUNT=$VULNERABILITY_COUNT" >> $GITHUB_ENV
              fi
              echo "ARE_TRIVY_RESULTS_EVALUATED=true" >> $GITHUB_ENV
              
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Upload Trivy Result To S3'
        run: |2-


              # Minifying Json
              jq -c '.' ${{ env.IMAGE_TAG }}-trivy-result.json > ${{ env.IMAGE_TAG }}-trivy-result.min.json

              # Uploading Minified Trivy Resuls
              response=$(curl -X POST -F 'file=@${{ env.IMAGE_TAG }}-trivy-result.min.json' -F 'provider=aws' -F 'resourceType=trivy-report' -F 'cloudStoragePath=/${{ env.PIPELINE_APPLICATION_ID }}/trivy_results/'  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: multipart/form-data'  '${{ env.S3_UPLOAD_ENDPOINT }}')

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
        if: ${{ env.ARE_TRIVY_RESULTS_EVALUATED == 'true' }}
      - name: 'Run :: Check Pipeline Safety'
        run: |2-

              if [ "${{ env.VULNERABILITY_COUNT }}" -gt 0 ]; then
                echo "UN-SAFE to continue Pipeline"
                exit 1
              else
                echo "SAFE to continue Pipeline"
              fi
              
      - name: 'Run :: Create Repository'
        run: >-
          aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
          || true
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Build, tag, and push image'
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
  _status-success:
    name: _status Success
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: 'Run :: Decoding Secrets d8b55433-316b-4680-81e4-c3f968e41f3b'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Success
        run: |2-

              response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/SUCCESS')
              
  _status-failed:
    name: _status Failed
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Decoding Secrets 4610cb27-2a2a-4c72-a694-1c0bc792876a'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Failed
        run: |2-

              response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/FAILED')
              
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    if: >-
      needs.build-and-push.outputs.stepsCanProceed == 'true' && ${{
      github.event.client_payload.releaseData == null }}
    steps:
      - name: 'Run :: Decoding Secrets 685cb90b-8435-4c69-9f46-2ab7096124dd'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-
              
              response=$(curl -X PATCH -d "imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=${{ github.event.head_commit.message }}&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.DEPLOYMENT_ENDPOINT }}')
              
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
